{"ast":null,"code":"let users = [{\n  email: 'contato@simplewebsolution.com',\n  password: 'Sws2024!',\n  username: 'Simple Web Solution'\n}];\nconst authServiceMock = {\n  register: async user => {\n    users.push(user);\n    return Promise.resolve({\n      status: 201,\n      data: 'Usuário cadastrado com sucesso'\n    });\n  },\n  login: async (email, password) => {\n    const user = users.find(u => u.email === email && u.password === password);\n    if (user) {\n      return Promise.resolve({\n        status: 200,\n        data: {\n          user,\n          token: 'fake-jwt-token'\n        }\n      });\n    } else {\n      return Promise.reject({\n        status: 401,\n        message: 'Email ou senha inválidos'\n      });\n    }\n  },\n  getUser: async userId => {\n    const user = users.find(u => u.id === userId);\n    if (user) {\n      return Promise.resolve({\n        status: 200,\n        data: user\n      });\n    } else {\n      return Promise.reject({\n        status: 404,\n        message: 'Usuário não encontrado'\n      });\n    }\n  },\n  updateUser: async (userId, updatedUserData) => {\n    let userIndex = users.findIndex(u => u.id === userId);\n    if (userIndex !== -1) {\n      users[userIndex] = {\n        ...users[userIndex],\n        ...updatedUserData\n      };\n      return Promise.resolve({\n        status: 200,\n        data: 'Usuário atualizado com sucesso'\n      });\n    } else {\n      return Promise.reject({\n        status: 404,\n        message: 'Usuário não encontrado'\n      });\n    }\n  },\n  deleteUser: async userId => {\n    let userIndex = users.findIndex(u => u.id === userId);\n    if (userIndex !== -1) {\n      users.splice(userIndex, 1);\n      return Promise.resolve({\n        status: 200,\n        data: 'Usuário deletado com sucesso'\n      });\n    } else {\n      return Promise.reject({\n        status: 404,\n        message: 'Usuário não encontrado'\n      });\n    }\n  }\n};\nexport default authServiceMock;","map":{"version":3,"names":["users","email","password","username","authServiceMock","register","user","push","Promise","resolve","status","data","login","find","u","token","reject","message","getUser","userId","id","updateUser","updatedUserData","userIndex","findIndex","deleteUser","splice"],"sources":["C:/PROJETOS/gestao_react/src/services/mockAuthService.js"],"sourcesContent":["let users = [\r\n  { email: 'contato@simplewebsolution.com', password: 'Sws2024!', username: 'Simple Web Solution' }\r\n];\r\n\r\nconst authServiceMock = {\r\n  register: async (user) => {\r\n    users.push(user);\r\n    return Promise.resolve({ status: 201, data: 'Usuário cadastrado com sucesso' });\r\n  },\r\n\r\n  login: async (email, password) => {\r\n    const user = users.find((u) => u.email === email && u.password === password);\r\n    if (user) {\r\n      return Promise.resolve({ status: 200, data: { user, token: 'fake-jwt-token' } });\r\n    } else {\r\n      return Promise.reject({ status: 401, message: 'Email ou senha inválidos' });\r\n    }\r\n  },\r\n\r\n  getUser: async (userId) => {\r\n    const user = users.find((u) => u.id === userId);\r\n    if (user) {\r\n      return Promise.resolve({ status: 200, data: user });\r\n    } else {\r\n      return Promise.reject({ status: 404, message: 'Usuário não encontrado' });\r\n    }\r\n  },\r\n\r\n  updateUser: async (userId, updatedUserData) => {\r\n    let userIndex = users.findIndex((u) => u.id === userId);\r\n    if (userIndex !== -1) {\r\n      users[userIndex] = { ...users[userIndex], ...updatedUserData };\r\n      return Promise.resolve({ status: 200, data: 'Usuário atualizado com sucesso' });\r\n    } else {\r\n      return Promise.reject({ status: 404, message: 'Usuário não encontrado' });\r\n    }\r\n  },\r\n\r\n  deleteUser: async (userId) => {\r\n    let userIndex = users.findIndex((u) => u.id === userId);\r\n    if (userIndex !== -1) {\r\n      users.splice(userIndex, 1);\r\n      return Promise.resolve({ status: 200, data: 'Usuário deletado com sucesso' });\r\n    } else {\r\n      return Promise.reject({ status: 404, message: 'Usuário não encontrado' });\r\n    }\r\n  },\r\n};\r\n\r\nexport default authServiceMock;\r\n"],"mappings":"AAAA,IAAIA,KAAK,GAAG,CACV;EAAEC,KAAK,EAAE,+BAA+B;EAAEC,QAAQ,EAAE,UAAU;EAAEC,QAAQ,EAAE;AAAsB,CAAC,CAClG;AAED,MAAMC,eAAe,GAAG;EACtBC,QAAQ,EAAE,MAAOC,IAAI,IAAK;IACxBN,KAAK,CAACO,IAAI,CAACD,IAAI,CAAC;IAChB,OAAOE,OAAO,CAACC,OAAO,CAAC;MAAEC,MAAM,EAAE,GAAG;MAAEC,IAAI,EAAE;IAAiC,CAAC,CAAC;EACjF,CAAC;EAEDC,KAAK,EAAE,MAAAA,CAAOX,KAAK,EAAEC,QAAQ,KAAK;IAChC,MAAMI,IAAI,GAAGN,KAAK,CAACa,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACb,KAAK,KAAKA,KAAK,IAAIa,CAAC,CAACZ,QAAQ,KAAKA,QAAQ,CAAC;IAC5E,IAAII,IAAI,EAAE;MACR,OAAOE,OAAO,CAACC,OAAO,CAAC;QAAEC,MAAM,EAAE,GAAG;QAAEC,IAAI,EAAE;UAAEL,IAAI;UAAES,KAAK,EAAE;QAAiB;MAAE,CAAC,CAAC;IAClF,CAAC,MAAM;MACL,OAAOP,OAAO,CAACQ,MAAM,CAAC;QAAEN,MAAM,EAAE,GAAG;QAAEO,OAAO,EAAE;MAA2B,CAAC,CAAC;IAC7E;EACF,CAAC;EAEDC,OAAO,EAAE,MAAOC,MAAM,IAAK;IACzB,MAAMb,IAAI,GAAGN,KAAK,CAACa,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACM,EAAE,KAAKD,MAAM,CAAC;IAC/C,IAAIb,IAAI,EAAE;MACR,OAAOE,OAAO,CAACC,OAAO,CAAC;QAAEC,MAAM,EAAE,GAAG;QAAEC,IAAI,EAAEL;MAAK,CAAC,CAAC;IACrD,CAAC,MAAM;MACL,OAAOE,OAAO,CAACQ,MAAM,CAAC;QAAEN,MAAM,EAAE,GAAG;QAAEO,OAAO,EAAE;MAAyB,CAAC,CAAC;IAC3E;EACF,CAAC;EAEDI,UAAU,EAAE,MAAAA,CAAOF,MAAM,EAAEG,eAAe,KAAK;IAC7C,IAAIC,SAAS,GAAGvB,KAAK,CAACwB,SAAS,CAAEV,CAAC,IAAKA,CAAC,CAACM,EAAE,KAAKD,MAAM,CAAC;IACvD,IAAII,SAAS,KAAK,CAAC,CAAC,EAAE;MACpBvB,KAAK,CAACuB,SAAS,CAAC,GAAG;QAAE,GAAGvB,KAAK,CAACuB,SAAS,CAAC;QAAE,GAAGD;MAAgB,CAAC;MAC9D,OAAOd,OAAO,CAACC,OAAO,CAAC;QAAEC,MAAM,EAAE,GAAG;QAAEC,IAAI,EAAE;MAAiC,CAAC,CAAC;IACjF,CAAC,MAAM;MACL,OAAOH,OAAO,CAACQ,MAAM,CAAC;QAAEN,MAAM,EAAE,GAAG;QAAEO,OAAO,EAAE;MAAyB,CAAC,CAAC;IAC3E;EACF,CAAC;EAEDQ,UAAU,EAAE,MAAON,MAAM,IAAK;IAC5B,IAAII,SAAS,GAAGvB,KAAK,CAACwB,SAAS,CAAEV,CAAC,IAAKA,CAAC,CAACM,EAAE,KAAKD,MAAM,CAAC;IACvD,IAAII,SAAS,KAAK,CAAC,CAAC,EAAE;MACpBvB,KAAK,CAAC0B,MAAM,CAACH,SAAS,EAAE,CAAC,CAAC;MAC1B,OAAOf,OAAO,CAACC,OAAO,CAAC;QAAEC,MAAM,EAAE,GAAG;QAAEC,IAAI,EAAE;MAA+B,CAAC,CAAC;IAC/E,CAAC,MAAM;MACL,OAAOH,OAAO,CAACQ,MAAM,CAAC;QAAEN,MAAM,EAAE,GAAG;QAAEO,OAAO,EAAE;MAAyB,CAAC,CAAC;IAC3E;EACF;AACF,CAAC;AAED,eAAeb,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}